// API Client Service - Centralized API communication
// Handles all API calls with error handling, retry logic, and caching

class APIClient {
  constructor() {
    // Smart environment detection
    this.environment = this.detectEnvironment();
    this.baseURL = this.getApiBaseUrl();
    this.timeout = 120000; // 2 minutes - increased for Claude Sonnet 4 large responses
    this.retryAttempts = 3;
    this.retryDelay = 1000; // 1 second
    
    console.log('üåç Environment:', this.environment);
    console.log('üîó API Base URL:', this.baseURL);
  }

  // Detect current environment
  detectEnvironment() {
    const hostname = window.location.hostname;
    const isDev = import.meta.env.DEV;
    
    if (isDev || hostname === 'localhost' || hostname === '127.0.0.1') {
      return 'development';
    } else if (hostname === 'isaacmineo.com' || hostname === 'www.isaacmineo.com') {
      return 'production';
    } else {
      return 'preview'; // Vercel preview deployments
    }
  }

  // Get API base URL based on environment
  getApiBaseUrl() {
    switch (this.environment) {
      case 'development':
        // Local development - try localhost backend
        return 'http://localhost:8000/api';
      case 'production':
      case 'preview':
        // Production/Preview - use Render backend
        return 'https://isaac-mineo-api.onrender.com/api';
      default:
        return 'http://localhost:8000/api';
    }
  }

  // Generic fetch wrapper with error handling and retry logic
  async fetchWithRetry(url, options = {}, attempt = 1) {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.timeout);

      const response = await fetch(url, {
        ...options,
        signal: controller.signal,
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      return await response.json();
    } catch (error) {
      if (attempt < this.retryAttempts && !error.name === 'AbortError') {
        console.warn(`API call failed (attempt ${attempt}/${this.retryAttempts}), retrying...`, error);
        await this.delay(this.retryDelay * attempt);
        return this.fetchWithRetry(url, options, attempt + 1);
      }
      throw error;
    }
  }

  // Utility delay function
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Health check endpoint with better error handling for development
  async healthCheck() {
    try {
      const response = await this.fetchWithRetry(`${this.baseURL.replace('/api', '')}/health`);
      return true;
    } catch (error) {
      // In development, don't spam console with connection errors
      if (this.environment === 'development') {
        console.warn('Development: Backend connection failed (this is expected if backend is not running)');
      } else {
        console.error('Health check failed:', error);
      }
      return false;
    }
  }

  // Send message to chatbot
  async sendMessage(question, sessionId = null) {
    try {
      const payload = {
        question,
        sessionId
      };

      const response = await this.fetchWithRetry(`${this.baseURL}/chatbot`, {
        method: 'POST',
        body: JSON.stringify(payload),
      });

      return {
        success: true,
        data: response
      };
    } catch (error) {
      console.error('Chatbot API error:', error);
      
      // Return fallback response
      return {
        success: false,
        data: {
          response: this.getFallbackResponse(question),
          sessionId: sessionId || `fallback_${Date.now()}`,
          searchMethod: 'fallback',
          cached: false,
          error: true,
          timestamp: new Date().toISOString()
        }
      };
    }
  }

  // Send contact form email using FastAPI backend
  async sendContactEmail(contactData) {
    const startTime = Date.now();
    
    console.log(`üìß Sending contact email via ${this.environment} environment...`);
    
    try {
      console.log(`üéØ Using FastAPI backend: ${this.baseURL}/contact`);
      const response = await this.fetchWithRetry(`${this.baseURL}/contact`, {
        method: 'POST',
        body: JSON.stringify(contactData),
      });

      const elapsed = Date.now() - startTime;
      console.log(`‚úÖ Contact email sent successfully in ${elapsed}ms`);
      
      return {
        success: true,
        data: response,
        method: this.environment === 'development' ? 'localhost' : 'render',
        duration: elapsed
      };
    } catch (error) {
      console.error(`‚ùå Contact email failed:`, error.message);
      
      const elapsed = Date.now() - startTime;
      return {
        success: false,
        error: error.message,
        duration: elapsed,
        environment: this.environment
      };
    }
  }

  // Get projects data
  async getProjects() {
    try {
      const response = await this.fetchWithRetry(`${this.baseURL}/projects`);
      return {
        success: true,
        data: response
      };
    } catch (error) {
      console.error('Projects API error:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // Fallback responses when API is unavailable
  getFallbackResponse(question) {
    const questionLower = question.toLowerCase();
    
    if (questionLower.includes('tech') || questionLower.includes('stack') || questionLower.includes('skills') || questionLower.includes('technologies')) {
      return "**Isaac's Complete Technology Stack:**\n\nüöÄ **Frontend Technologies (Expert):**\n‚Ä¢ **React 18** (Expert) - Hooks, Context, performance - Used in Nutrivize, Portfolio\n‚Ä¢ **TypeScript/JavaScript** (Expert) - ES6+, async programming - All projects\n‚Ä¢ **Tailwind CSS** (Expert) - Utility-first styling - Portfolio, modern UI/UX\n‚Ä¢ **HTML5/CSS3** (Expert) - Semantic markup, animations - All web applications\n\nüîß **Backend Technologies (Expert):**\n‚Ä¢ **Python** (Expert) - OOP, async programming - Nutrivize, EchoPod, SignalFlow\n‚Ä¢ **FastAPI** (Expert) - RESTful APIs, async, documentation - Production APIs\n‚Ä¢ **Node.js** (Proficient) - Server-side JavaScript, API development\n‚Ä¢ **Database Design** (Expert) - MongoDB, Redis, optimization - Scalable systems\n\nü§ñ **AI & Machine Learning (Expert):**\n‚Ä¢ **OpenAI GPT-4/Vision** (Expert) - Nutrivize food recognition, Portfolio chat\n‚Ä¢ **Claude API** (Proficient) - Advanced conversations - Nutrivize insights\n‚Ä¢ **Vector Databases** (Proficient) - Pinecone for semantic search - Portfolio AI\n‚Ä¢ **Prompt Engineering** (Expert) - Context optimization, response quality\n\nüíæ **Databases (Expert):**\n‚Ä¢ **MongoDB Atlas** (Expert) - Production data storage - Nutrivize, SignalFlow\n‚Ä¢ **Redis Cloud** (Expert) - Caching, sessions - Performance optimization\n‚Ä¢ **Firebase** (Proficient) - Auth, real-time features - User management\n\n‚òÅÔ∏è **Cloud & Deployment (Proficient):**\n‚Ä¢ **Vercel** (Expert) - Frontend deployment - Portfolio, optimized performance\n‚Ä¢ **Render** (Expert) - Backend hosting - FastAPI services, databases\n‚Ä¢ **Performance Optimization** (Expert) - Sub-2s load times, caching strategies\n\n**Real-World Projects:**\n‚Ä¢ **Nutrivize**: React + FastAPI + MongoDB + OpenAI Vision (Live)\n‚Ä¢ **SignalFlow**: Python + FastAPI + MongoDB + AI Analysis (Live)\n‚Ä¢ **Portfolio**: React + Vite + Tailwind + FastAPI + Pinecone + AI Chat\n‚Ä¢ **EchoPod**: Python + NLP + Voice Synthesis + Audio Processing\n\nIsaac specializes in full-stack development with AI integration and has production experience across all these technologies.";
    }
    
    if (questionLower.includes('project') || questionLower.includes('built') || questionLower.includes('work')) {
      return `**Isaac's Featured Projects:**

üçé **Nutrivize** (Live - Flagship Project)
*AI-powered nutrition tracker with computer vision*
‚Ä¢ **Tech Stack**: React 18 + FastAPI + MongoDB Atlas + OpenAI GPT-4 Vision + Redis Cloud
‚Ä¢ **Key Features**: Photo food recognition, macro tracking, AI meal suggestions, real-time sync
‚Ä¢ **Impact**: Active users, production-ready system, demonstrates AI + full-stack expertise
‚Ä¢ **Live Demo**: https://nutrivize.com

üìä **SignalFlow** (Live - AI Trading System)
*Advanced AI trading analysis with 60-65% win rate*
‚Ä¢ **Tech Stack**: Python 3.11+ + FastAPI + Streamlit + MongoDB + OpenAI + Claude + Railway
‚Ä¢ **Key Features**: Multi-agent architecture, Kelly Criterion math, real-time analysis, Telegram bot
‚Ä¢ **Impact**: Professional-grade trading system with supervised learning and adaptive feedback
‚Ä¢ **Live Demo**: https://web-production-3e19d.up.railway.app

üéôÔ∏è **EchoPod** (AI Podcast Generator)
*Revolutionary AI-powered podcast creation from text*
‚Ä¢ **Tech Stack**: Python + FastAPI + Advanced voice synthesis + NLP processing
‚Ä¢ **Key Features**: Script optimization, natural voice synthesis, automated production pipeline
‚Ä¢ **Impact**: Democratizing podcast creation through AI automation

üíº **AI Portfolio** (This Website)
*Modern portfolio with AI chat and voice features*
‚Ä¢ **Tech Stack**: React + Vite + Tailwind + FastAPI + Pinecone + WebSocket + AI APIs
‚Ä¢ **Key Features**: AI knowledge base, voice chat, glassmorphism UI, performance optimization
‚Ä¢ **Impact**: Innovative developer showcase with cutting-edge AI integration

Each project demonstrates Isaac's ability to build production-ready applications that solve real problems using modern technologies and AI integration.`;
    }
    
    if (questionLower.includes('experience') || questionLower.includes('background') || questionLower.includes('journey')) {
      return `**Isaac's Development Journey:**

üìà **Self-Directed Learning Path (2021-Present)**
‚Ä¢ **2021**: Started with HTML, CSS, JavaScript fundamentals - Built first static websites
‚Ä¢ **2022**: Advanced to React, Node.js, modern development practices - Component-based architecture
‚Ä¢ **2023**: Mastered FastAPI, AI integration, cloud deployment - Full-stack production systems
‚Ä¢ **2024-Present**: Expert-level AI-powered applications - Scalable systems with real users

üéØ **Professional Development**
‚Ä¢ **Full-Stack Expertise**: End-to-end application architecture from database to UI
‚Ä¢ **AI Integration**: OpenAI, Claude, vector databases - Building intelligent applications
‚Ä¢ **Production Experience**: Live applications with active users (Nutrivize, SignalFlow)
‚Ä¢ **Performance Engineering**: Sub-2s load times, scalable APIs, efficient caching

üèÜ **Real-World Impact**
‚Ä¢ **Nutrivize**: Active users improving their health through AI-powered nutrition tracking
‚Ä¢ **SignalFlow**: Trading system with 60-65% win rate and mathematical risk management
‚Ä¢ **Portfolio**: Innovative AI chat helping people understand Isaac's technical background

üìö **Continuous Learning Approach**
‚Ä¢ Masters new technologies through hands-on project building
‚Ä¢ Stays current with AI advancements and modern web development practices
‚Ä¢ Active engagement with technical documentation and developer communities
‚Ä¢ Regular experimentation with emerging technologies and frameworks

**Education**: Middlebury College (2019-2023) - Liberal Arts with strong analytical foundation

Isaac is a Full-Stack Developer and AI Engineer specializing in intelligent, scalable web applications. He focuses on clean code, performance optimization, and building tools with real-world impact.`;
    }
    
    if (questionLower.includes('contact') || questionLower.includes('email') || questionLower.includes('reach')) {
      return `**Contact Isaac Mineo:**

üìß **Primary Email**: isaac@isaacmineo.com  
‚ö° **Response Time**: Typically within 24 hours

üåê **Professional Links**:
‚Ä¢ **GitHub**: https://github.com/GoldenRodger5 - All public projects and code
‚Ä¢ **LinkedIn**: https://linkedin.com/in/isaacmineo2001 - Professional updates and network
‚Ä¢ **Portfolio**: https://isaacmineo.com - Complete project portfolio with AI chat

üíº **Currently Seeking**: 
‚Ä¢ Backend Engineer roles - Building scalable APIs and intelligent systems
‚Ä¢ AI Engineer positions - Integrating AI capabilities into products
‚Ä¢ Full-Stack Developer roles - End-to-end modern web development
‚Ä¢ Senior positions with technical leadership opportunities

üè¢ **Interested Industries**:
‚Ä¢ HealthTech - Building tools that improve people's wellbeing
‚Ä¢ AI/Productivity Tools - Creating intelligent applications
‚Ä¢ Developer Tooling - Building better development experiences
‚Ä¢ Innovative Startups - Companies focused on real-world impact

Isaac is always open to discussing opportunities, technical collaborations, and project partnerships!`;
    }
    
    if (questionLower.includes('job') || questionLower.includes('career') || questionLower.includes('hiring')) {
      return `**Isaac's Career Goals:**

üéØ **Target Roles**:
‚Ä¢ **Backend Engineer** - Building scalable APIs and intelligent systems
‚Ä¢ **AI Engineer** - Integrating AI capabilities into products and workflows
‚Ä¢ **Full-Stack Developer** - End-to-end feature development with modern technologies
‚Ä¢ **Senior Developer** - Technical leadership and architecture decisions

üè¢ **Preferred Industries**:
‚Ä¢ **HealthTech** - Building tools that improve people's health (like Nutrivize)
‚Ä¢ **AI/Productivity Tools** - Creating intelligent applications that enhance productivity
‚Ä¢ **Developer Tooling** - Building tools that help other developers
‚Ä¢ **Innovative Startups** - Companies focused on making real-world impact

üí™ **What Isaac Brings**:
‚Ä¢ **Speed + Quality** - Ship features quickly without sacrificing code quality
‚Ä¢ **AI Integration Expertise** - Experience building intelligent, context-aware applications
‚Ä¢ **Full-Stack Capabilities** - Handle everything from database design to user interfaces
‚Ä¢ **Performance Focus** - Always optimizing for speed, scalability, and user experience

üåü **Ideal Work Environment**:
‚Ä¢ Collaborative teams with smart, creative people
‚Ä¢ Learning culture that encourages growth and innovation
‚Ä¢ Impact-focused: building products that solve real problems
‚Ä¢ Technical excellence: teams that value code quality and best practices

üìç **Work Preferences**: Remote-first preferred, open to relocation for exceptional opportunities

Isaac is seeking backend, AI engineering, or full-stack roles with innovative teams. He's particularly interested in healthtech, AI-powered productivity tools, developer tooling, and startups focused on making real-world impact.";
    }
    
    if (questionLower.includes('nutrivize') || questionLower.includes('project')) {
      return "Nutrivize is Isaac's flagship project - an AI-powered nutrition tracker using computer vision for food recognition. It's built with React, FastAPI, and integrates OpenAI's GPT-4 Vision for intelligent meal tracking with personalized insights.";
    }
    
    if (questionLower.includes('experience') || questionLower.includes('background')) {
      return "Isaac is a Full-Stack Developer and AI Engineer specializing in intelligent, scalable web applications. He focuses on clean code, performance optimization, and building tools with real-world impact. He's passionate about AI integration and modern web technologies.";
    }
    
    if (questionLower.includes('contact') || questionLower.includes('email') || questionLower.includes('reach')) {
      return "You can reach Isaac at isaacmineo@gmail.com, GitHub at github.com/GoldenRodger5, or LinkedIn at linkedin.com/in/isaacmineo2001. He's always open to discussing opportunities and collaborations!";
    }
    
    if (questionLower.includes('job') || questionLower.includes('career') || questionLower.includes('hiring')) {
      return "Isaac is seeking backend, AI engineering, or full-stack roles with innovative teams. He's particularly interested in healthtech, AI-powered productivity tools, developer tooling, and startups focused on making real-world impact.";
    }
    
    return "Isaac is a Full-Stack Developer specializing in AI-powered applications. Ask me about his tech stack, projects like Nutrivize, experience, or career goals. Contact him at isaacmineo@gmail.com for opportunities!";
  }

  // GitHub Code Explanation API
  async explainCode(code, mode = 'explain', fileContext = null, selectedCode = null) {
    try {
      const response = await this.fetchWithRetry(this.baseURL + '/github/explain-code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          code,
          mode,
          file_context: fileContext,
          selected_code: selectedCode
        })
      });

      return response;
    } catch (error) {
      console.error('Code explanation API error:', error);
      
      // Return fallback explanation
      return {
        success: false,
        error: error.message,
        fallback: true,
        data: {
          explanation: "I'm having trouble connecting to the Claude AI service right now. Here's what I can tell you about the code:\n\n**Code Analysis (Offline Mode)**\nThis appears to be " + (fileContext?.language || 'unknown') + " code" + (fileContext?.path ? " from " + fileContext.path : '') + ". \n\n" + 
            (mode === 'teach' ? 
              'For learning purposes, I recommend breaking down the code into smaller functions and adding comments to understand each part.' :
              mode === 'summarize' ?
              'This code appears to contain logic for data processing or application functionality.' :
              'This code contains various programming constructs that work together to achieve specific functionality.'
            ) + "\n\nPlease try again in a moment, or contact Isaac directly for detailed code explanations powered by Claude Sonnet.",
          mode,
          model: "claude-sonnet-4-20250514",
          context: {
            file_path: fileContext?.path || null,
            language: fileContext?.language || null,
            has_selection: Boolean(selectedCode)
          }
        }
      };
    }
  }
}

// Create and export singleton instance
export const apiClient = new APIClient();
export default apiClient;
